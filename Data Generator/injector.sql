--TPC-H Create DATABASE
DROP TABLE IF EXISTS NATION
DROP TABLE IF EXISTS REGION
DROP TABLE IF EXISTS PART
DROP TABLE IF EXISTS SUPPLIER
DROP TABLE IF EXISTS PARTSUPP
DROP TABLE IF EXISTS CUSTOMER
DROP TABLE IF EXISTS ORDERS
DROP TABLE IF EXISTS LINEITEM

CREATE TABLE NATION  ( N_NATIONKEY  INTEGER NOT NULL,
                            N_NAME       CHAR(25) NOT NULL,
                            N_REGIONKEY  INTEGER NOT NULL,
                            N_COMMENT    VARCHAR(152));
CREATE TABLE REGION  ( R_REGIONKEY  INTEGER NOT NULL,
                            R_NAME       CHAR(25) NOT NULL,
                            R_COMMENT    VARCHAR(152));
CREATE TABLE PART  ( P_PARTKEY     INTEGER NOT NULL,
                          P_NAME        VARCHAR(55) NOT NULL,
                          P_MFGR        CHAR(25) NOT NULL,
                          P_BRAND       CHAR(10) NOT NULL,
                          P_TYPE        VARCHAR(25) NOT NULL,
                          P_SIZE        INTEGER NOT NULL,
                          P_CONTAINER   CHAR(10) NOT NULL,
                          P_RETAILPRICE DECIMAL(15,2) NOT NULL,
                          P_COMMENT     VARCHAR(23) NOT NULL );
CREATE TABLE SUPPLIER ( S_SUPPKEY     INTEGER NOT NULL,
                             S_NAME        CHAR(25) NOT NULL,
                             S_ADDRESS     VARCHAR(40) NOT NULL,
                             S_NATIONKEY   INTEGER NOT NULL,
                             S_PHONE       CHAR(15) NOT NULL,
                             S_ACCTBAL     DECIMAL(15,2) NOT NULL,
                             S_COMMENT     VARCHAR(101) NOT NULL);
CREATE TABLE PARTSUPP ( PS_PARTKEY     INTEGER NOT NULL,
                             PS_SUPPKEY     INTEGER NOT NULL,
                             PS_AVAILQTY    INTEGER NOT NULL,
                             PS_SUPPLYCOST  DECIMAL(15,2)  NOT NULL,
                             PS_COMMENT     VARCHAR(199) NOT NULL );
CREATE TABLE CUSTOMER ( C_CUSTKEY     INTEGER NOT NULL,
                             C_NAME        VARCHAR(25) NOT NULL,
                             C_ADDRESS     VARCHAR(40) NOT NULL,
                             C_NATIONKEY   INTEGER NOT NULL,
                             C_PHONE       CHAR(15) NOT NULL,
                             C_ACCTBAL     DECIMAL(15,2)   NOT NULL,
                             C_MKTSEGMENT  CHAR(10) NOT NULL,
                             C_COMMENT     VARCHAR(117) NOT NULL);
CREATE TABLE ORDERS  ( O_ORDERKEY       INTEGER NOT NULL,
                           O_CUSTKEY        INTEGER NOT NULL,
                           O_ORDERSTATUS    CHAR(1) NOT NULL,
                           O_TOTALPRICE     DECIMAL(15,2) NOT NULL,
                           O_ORDERDATE      DATE NOT NULL,
                           O_ORDERPRIORITY  CHAR(15) NOT NULL,
                           O_CLERK          CHAR(15) NOT NULL,
                           O_SHIPPRIORITY   INTEGER NOT NULL,
                           O_COMMENT        VARCHAR(79) NOT NULL);
CREATE TABLE LINEITEM ( L_ORDERKEY    INTEGER NOT NULL,
                             L_PARTKEY     INTEGER NOT NULL,
                             L_SUPPKEY     INTEGER NOT NULL,
                             L_LINENUMBER  INTEGER NOT NULL,
                             L_QUANTITY    DECIMAL(15,2) NOT NULL,
                             L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,
                             L_DISCOUNT    DECIMAL(15,2) NOT NULL,
                             L_TAX         DECIMAL(15,2) NOT NULL,
                             L_RETURNFLAG  CHAR(1) NOT NULL,
                             L_LINESTATUS  CHAR(1) NOT NULL,
                             L_SHIPDATE    DATE NOT NULL,
                             L_COMMITDATE  DATE NOT NULL,
                             L_RECEIPTDATE DATE NOT NULL,
                             L_SHIPINSTRUCT CHAR(25) NOT NULL,
                             L_SHIPMODE     CHAR(10) NOT NULL,
                             L_COMMENT      VARCHAR(44) NOT NULL);
--GO

--TPC-H Bulk insert data and inject P% inconsistency
DECLARE @P FLOAT, @N INTEGER, @TOTAL INTEGER, @x INTEGER, @i INTEGER, @j INTEGER;
SET @P = 10;

BULK INSERT REGION FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\region.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
PRINT 'REGION DONE';

BULK INSERT NATION FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\nation.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
PRINT 'NATION DONE'

BULK INSERT SUPPLIER FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\supplier.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
SET @TOTAL = (SELECT COUNT(*) FROM SUPPLIER);
SET @x = FLOOR((@P*@TOTAL)/(2700 - 21*@P));
SET @i = 2;
WHILE (@i <= 7)
BEGIN
	DROP TABLE IF EXISTS S_DUPKEY;
	SELECT TOP (@x) S_SUPPKEY INTO S_DUPKEY FROM SUPPLIER GROUP BY S_SUPPKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
	SET @j = 1;
	WHILE(@j < @i)
	BEGIN
		DROP TABLE IF EXISTS S_TEMPKEYS;
		DROP TABLE IF EXISTS S_TEMPROWS;
		SELECT TOP (@x) S_SUPPKEY INTO S_TEMPKEYS FROM SUPPLIER GROUP BY S_SUPPKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
		SELECT * INTO S_TEMPROWS FROM SUPPLIER WHERE S_SUPPKEY IN (SELECT S_SUPPKEY FROM S_TEMPKEYS);
		UPDATE A SET S_SUPPKEY = B.S_SUPPKEY FROM
			(SELECT *, ROW_NUMBER() OVER (ORDER BY S_SUPPKEY) AS ROW_NUM FROM S_TEMPROWS) A JOIN
			(SELECT *, ROW_NUMBER() OVER (ORDER BY S_SUPPKEY) AS ROW_NUM FROM S_DUPKEY) B
			ON A.ROW_NUM = B.ROW_NUM;
		INSERT INTO SUPPLIER SELECT * FROM S_TEMPROWS;
		SET @j = @j + 1;
	END
	SET @i = @i + 1;
END
DROP TABLE IF EXISTS S_DUPKEY;
DROP TABLE IF EXISTS S_TEMPKEYS;
DROP TABLE IF EXISTS S_TEMPROWS;
PRINT 'SUPPLIER DONE'

BULK INSERT CUSTOMER FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\customer.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
SET @TOTAL = (SELECT COUNT(*) FROM CUSTOMER);
SET @x = FLOOR((@P*@TOTAL)/(2700 - 21*@P));
SET @i = 2;
WHILE (@i <= 7)
BEGIN
	DROP TABLE IF EXISTS C_DUPKEY;
	SELECT TOP (@x) C_CUSTKEY INTO C_DUPKEY FROM CUSTOMER GROUP BY C_CUSTKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
	SET @j = 1;
	WHILE(@j < @i)
	BEGIN
		DROP TABLE IF EXISTS C_TEMPKEYS;
		DROP TABLE IF EXISTS C_TEMPROWS;
		SELECT TOP (@x) C_CUSTKEY INTO C_TEMPKEYS FROM CUSTOMER GROUP BY C_CUSTKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
		SELECT * INTO C_TEMPROWS FROM CUSTOMER WHERE C_CUSTKEY IN (SELECT C_CUSTKEY FROM C_TEMPKEYS);
		UPDATE A SET C_CUSTKEY = B.C_CUSTKEY FROM
			(SELECT *, ROW_NUMBER() OVER (ORDER BY C_CUSTKEY) AS ROW_NUM FROM C_TEMPROWS) A JOIN
			(SELECT *, ROW_NUMBER() OVER (ORDER BY C_CUSTKEY) AS ROW_NUM FROM C_DUPKEY) B
			ON A.ROW_NUM = B.ROW_NUM;
		INSERT INTO CUSTOMER SELECT * FROM C_TEMPROWS;
		SET @j = @j + 1;
	END
	SET @i = @i + 1;
END
DROP TABLE IF EXISTS C_DUPKEY;
DROP TABLE IF EXISTS C_TEMPKEYS;
DROP TABLE IF EXISTS C_TEMPROWS;
PRINT 'CUSTOMER DONE'

BULK INSERT PART FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\part.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
SET @TOTAL = (SELECT COUNT(*) FROM PART);
SET @x = FLOOR((@P*@TOTAL)/(2700 - 21*@P));
SET @i = 2;
WHILE (@i <= 7)
BEGIN
	DROP TABLE IF EXISTS P_DUPKEY;
	SELECT TOP (@x) P_PARTKEY INTO P_DUPKEY FROM PART GROUP BY P_PARTKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
	SET @j = 1;
	WHILE(@j < @i)
	BEGIN
		DROP TABLE IF EXISTS P_TEMPKEYS;
		DROP TABLE IF EXISTS P_TEMPROWS;
		SELECT TOP (@x) P_PARTKEY INTO P_TEMPKEYS FROM PART GROUP BY P_PARTKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
		SELECT * INTO P_TEMPROWS FROM PART WHERE P_PARTKEY IN (SELECT P_PARTKEY FROM P_TEMPKEYS);
		UPDATE A SET P_PARTKEY = B.P_PARTKEY FROM
			(SELECT *, ROW_NUMBER() OVER (ORDER BY P_PARTKEY) AS ROW_NUM FROM P_TEMPROWS) A JOIN
			(SELECT *, ROW_NUMBER() OVER (ORDER BY P_PARTKEY) AS ROW_NUM FROM P_DUPKEY) B
			ON A.ROW_NUM = B.ROW_NUM;
		INSERT INTO PART SELECT * FROM P_TEMPROWS;
		SET @j = @j + 1;
	END
	SET @i = @i + 1;
END
DROP TABLE IF EXISTS P_DUPKEY;
DROP TABLE IF EXISTS P_TEMPKEYS;
DROP TABLE IF EXISTS P_TEMPROWS;
PRINT 'PART DONE'

BULK INSERT ORDERS FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\orders.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
SET @TOTAL = (SELECT COUNT(*) FROM ORDERS);
SET @x = FLOOR((@P*@TOTAL)/(2700 - 21*@P));
SET @i = 2;
WHILE (@i <= 7)
BEGIN
	DROP TABLE IF EXISTS O_DUPKEY;
	SELECT TOP (@x) O_ORDERKEY INTO O_DUPKEY FROM ORDERS GROUP BY O_ORDERKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
	SET @j = 1;
	WHILE(@j < @i)
	BEGIN
		DROP TABLE IF EXISTS O_TEMPKEYS;
		DROP TABLE IF EXISTS O_TEMPROWS;
		SELECT TOP (@x) O_ORDERKEY INTO O_TEMPKEYS FROM ORDERS GROUP BY O_ORDERKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
		SELECT * INTO O_TEMPROWS FROM ORDERS WHERE O_ORDERKEY IN (SELECT O_ORDERKEY FROM O_TEMPKEYS);
		UPDATE A SET O_ORDERKEY = B.O_ORDERKEY FROM
			(SELECT *, ROW_NUMBER() OVER (ORDER BY O_ORDERKEY) AS ROW_NUM FROM O_TEMPROWS) A JOIN
			(SELECT *, ROW_NUMBER() OVER (ORDER BY O_ORDERKEY) AS ROW_NUM FROM O_DUPKEY) B
			ON A.ROW_NUM = B.ROW_NUM;
		INSERT INTO ORDERS SELECT * FROM O_TEMPROWS;
		SET @j = @j + 1;
	END
	SET @i = @i + 1;
END
DROP TABLE IF EXISTS O_DUPKEY;
DROP TABLE IF EXISTS O_TEMPKEYS;
DROP TABLE IF EXISTS O_TEMPROWS;
PRINT 'ORDERS DONE'

BULK INSERT PARTSUPP FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\partsupp.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
SET @TOTAL = (SELECT COUNT(*) FROM PARTSUPP);
SET @x = FLOOR((@P*@TOTAL)/(2700 - 21*@P));
SET @i = 2;
WHILE (@i <= 7)
BEGIN
	DROP TABLE IF EXISTS PS_DUPKEY;
	SELECT TOP (@x) PS_PARTKEY, PS_SUPPKEY INTO PS_DUPKEY FROM PARTSUPP GROUP BY PS_PARTKEY, PS_SUPPKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
	SET @j = 1;
	WHILE(@j < @i)
	BEGIN
		DROP TABLE IF EXISTS PS_TEMPKEYS;
		DROP TABLE IF EXISTS PS_TEMPROWS;
		SELECT TOP (@x) PS_PARTKEY, PS_SUPPKEY INTO PS_TEMPKEYS FROM PARTSUPP GROUP BY PS_PARTKEY, PS_SUPPKEY HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
		SELECT * INTO PS_TEMPROWS FROM PARTSUPP WHERE EXISTS
			(SELECT PS_PARTKEY, PS_SUPPKEY FROM PS_TEMPKEYS
				WHERE PARTSUPP.PS_PARTKEY = PS_TEMPKEYS.PS_PARTKEY
				AND PARTSUPP.PS_SUPPKEY = PS_TEMPKEYS.PS_SUPPKEY);
		UPDATE A SET PS_PARTKEY = B.PS_PARTKEY, PS_SUPPKEY = B.PS_SUPPKEY FROM
			(SELECT *, ROW_NUMBER() OVER (ORDER BY PS_PARTKEY, PS_SUPPKEY) AS ROW_NUM FROM PS_TEMPROWS) A JOIN
			(SELECT *, ROW_NUMBER() OVER (ORDER BY PS_PARTKEY, PS_SUPPKEY) AS ROW_NUM FROM PS_DUPKEY) B
			ON A.ROW_NUM = B.ROW_NUM;
		INSERT INTO PARTSUPP SELECT * FROM PS_TEMPROWS;
		SET @j = @j + 1;
	END
	SET @i = @i + 1;
END
DROP TABLE IF EXISTS PS_DUPKEY;
DROP TABLE IF EXISTS PS_TEMPKEYS;
DROP TABLE IF EXISTS PS_TEMPROWS;
PRINT 'PARTSUPP DONE'

BULK INSERT LINEITEM FROM 'C:\Users\Public\TPC-H_2.18.0_rc2\dbgen\lineitem.tbl' WITH (TABLOCK, DATAFILETYPE='char', CODEPAGE='raw', FIELDTERMINATOR = '|',ROWTERMINATOR = '0x0A');
SET @TOTAL = (SELECT COUNT(*) FROM LINEITEM);
SET @x = FLOOR((@P*@TOTAL)/(2700 - 21*@P));
SET @i = 2;
WHILE (@i <= 7)
BEGIN
	DROP TABLE IF EXISTS L_DUPKEY;
	SELECT TOP (@x) L_ORDERKEY, L_LINENUMBER INTO L_DUPKEY FROM LINEITEM GROUP BY L_ORDERKEY, L_LINENUMBER HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
	SET @j = 1;
	WHILE(@j < @i)
	BEGIN
		DROP TABLE IF EXISTS L_TEMPKEYS;
		DROP TABLE IF EXISTS L_TEMPROWS;
		SELECT TOP (@x) L_ORDERKEY, L_LINENUMBER INTO L_TEMPKEYS FROM LINEITEM GROUP BY L_ORDERKEY, L_LINENUMBER HAVING COUNT(*) = 1 ORDER BY ABS(CHECKSUM(NEWID()));
		SELECT * INTO L_TEMPROWS FROM LINEITEM WHERE EXISTS
			(SELECT L_ORDERKEY, L_LINENUMBER FROM L_TEMPKEYS
				WHERE LINEITEM.L_ORDERKEY = L_TEMPKEYS.L_ORDERKEY
				AND LINEITEM.L_LINENUMBER = L_TEMPKEYS.L_LINENUMBER);
		UPDATE A SET L_ORDERKEY = B.L_ORDERKEY, L_LINENUMBER = B.L_LINENUMBER FROM
			(SELECT *, ROW_NUMBER() OVER (ORDER BY L_ORDERKEY, L_LINENUMBER) AS ROW_NUM FROM L_TEMPROWS) A JOIN
			(SELECT *, ROW_NUMBER() OVER (ORDER BY L_ORDERKEY, L_LINENUMBER) AS ROW_NUM FROM L_DUPKEY) B
			ON A.ROW_NUM = B.ROW_NUM;
		INSERT INTO LINEITEM SELECT * FROM L_TEMPROWS;
		SET @j = @j + 1;
	END
	SET @i = @i + 1;
END
DROP TABLE IF EXISTS L_DUPKEY;
DROP TABLE IF EXISTS L_TEMPKEYS;
DROP TABLE IF EXISTS L_TEMPROWS;
PRINT 'LINEITEM DONE'

-- Drop existing Cons-tables
DROP TABLE IF EXISTS CAVSAT_CONS_NATION;
DROP TABLE IF EXISTS CAVSAT_CONS_REGION;
DROP TABLE IF EXISTS CAVSAT_CONS_SUPPLIER;
DROP TABLE IF EXISTS CAVSAT_CONS_PART;
DROP TABLE IF EXISTS CAVSAT_CONS_CUSTOMER;
DROP TABLE IF EXISTS CAVSAT_CONS_PARTSUPP;
DROP TABLE IF EXISTS CAVSAT_CONS_ORDERS;
DROP TABLE IF EXISTS CAVSAT_CONS_LINEITEM;

--Create new cons-tables
WITH CONS_KEYS AS (SELECT N_NATIONKEY FROM NATION GROUP BY N_NATIONKEY HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_NATION FROM (SELECT * FROM NATION WHERE N_NATIONKEY IN (SELECT N_NATIONKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT R_REGIONKEY FROM REGION GROUP BY R_REGIONKEY HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_REGION FROM (SELECT * FROM REGION WHERE R_REGIONKEY IN (SELECT R_REGIONKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT S_SUPPKEY FROM SUPPLIER GROUP BY S_SUPPKEY HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_SUPPLIER FROM (SELECT * FROM SUPPLIER WHERE S_SUPPKEY IN (SELECT S_SUPPKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT P_PARTKEY FROM PART GROUP BY P_PARTKEY HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_PART FROM (SELECT * FROM PART WHERE P_PARTKEY IN (SELECT P_PARTKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT C_CUSTKEY FROM CUSTOMER GROUP BY C_CUSTKEY HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_CUSTOMER FROM (SELECT * FROM CUSTOMER WHERE C_CUSTKEY IN (SELECT C_CUSTKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT PS_PARTKEY, PS_SUPPKEY FROM PARTSUPP GROUP BY PS_PARTKEY, PS_SUPPKEY HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_PARTSUPP FROM (SELECT * FROM PARTSUPP PS WHERE EXISTS (SELECT 1 FROM CONS_KEYS WHERE CONS_KEYS.PS_PARTKEY = PS.PS_PARTKEY AND CONS_KEYS.PS_SUPPKEY = PS.PS_SUPPKEY)) A;

WITH CONS_KEYS AS (SELECT O_ORDERKEY FROM ORDERS GROUP BY O_ORDERKEY HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_ORDERS FROM (SELECT * FROM ORDERS WHERE O_ORDERKEY IN (SELECT O_ORDERKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT L_ORDERKEY, L_LINENUMBER FROM LINEITEM GROUP BY L_ORDERKEY, L_LINENUMBER HAVING COUNT(*) = 1)
SELECT * INTO CAVSAT_CONS_LINEITEM FROM (SELECT * FROM LINEITEM L WHERE EXISTS (SELECT 1 FROM CONS_KEYS WHERE CONS_KEYS.L_ORDERKEY = L.L_ORDERKEY AND CONS_KEYS.L_LINENUMBER = L.L_LINENUMBER)) A;
PRINT 'CREATED CONS-TABLES'
--GO


-- Drop existing Incons-tables
DROP TABLE IF EXISTS CAVSAT_INCONS_NATION;
DROP TABLE IF EXISTS CAVSAT_INCONS_REGION;
DROP TABLE IF EXISTS CAVSAT_INCONS_SUPPLIER;
DROP TABLE IF EXISTS CAVSAT_INCONS_PART;
DROP TABLE IF EXISTS CAVSAT_INCONS_CUSTOMER;
DROP TABLE IF EXISTS CAVSAT_INCONS_PARTSUPP;
DROP TABLE IF EXISTS CAVSAT_INCONS_ORDERS;
DROP TABLE IF EXISTS CAVSAT_INCONS_LINEITEM;


--Create new incons-tables
WITH CONS_KEYS AS (SELECT N_NATIONKEY FROM NATION GROUP BY N_NATIONKEY HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_NATION FROM (SELECT * FROM NATION WHERE N_NATIONKEY IN (SELECT N_NATIONKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT R_REGIONKEY FROM REGION GROUP BY R_REGIONKEY HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_REGION FROM (SELECT * FROM REGION WHERE R_REGIONKEY IN (SELECT R_REGIONKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT S_SUPPKEY FROM SUPPLIER GROUP BY S_SUPPKEY HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_SUPPLIER FROM (SELECT * FROM SUPPLIER WHERE S_SUPPKEY IN (SELECT S_SUPPKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT P_PARTKEY FROM PART GROUP BY P_PARTKEY HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_PART FROM (SELECT * FROM PART WHERE P_PARTKEY IN (SELECT P_PARTKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT C_CUSTKEY FROM CUSTOMER GROUP BY C_CUSTKEY HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_CUSTOMER FROM (SELECT * FROM CUSTOMER WHERE C_CUSTKEY IN (SELECT C_CUSTKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT PS_PARTKEY, PS_SUPPKEY FROM PARTSUPP GROUP BY PS_PARTKEY, PS_SUPPKEY HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_PARTSUPP FROM (SELECT * FROM PARTSUPP PS WHERE EXISTS (SELECT 1 FROM CONS_KEYS WHERE CONS_KEYS.PS_PARTKEY = PS.PS_PARTKEY AND CONS_KEYS.PS_SUPPKEY = PS.PS_SUPPKEY)) A;

WITH CONS_KEYS AS (SELECT O_ORDERKEY FROM ORDERS GROUP BY O_ORDERKEY HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_ORDERS FROM (SELECT * FROM ORDERS WHERE O_ORDERKEY IN (SELECT O_ORDERKEY FROM CONS_KEYS)) A;

WITH CONS_KEYS AS (SELECT L_ORDERKEY, L_LINENUMBER FROM LINEITEM GROUP BY L_ORDERKEY, L_LINENUMBER HAVING COUNT(*) > 1)
SELECT * INTO CAVSAT_INCONS_LINEITEM FROM (SELECT * FROM LINEITEM L WHERE EXISTS (SELECT 1 FROM CONS_KEYS WHERE CONS_KEYS.L_ORDERKEY = L.L_ORDERKEY AND CONS_KEYS.L_LINENUMBER = L.L_LINENUMBER)) A;
PRINT 'CREATED INCONS-TABLES'
--GO


--Add primary keys to cons-tables
ALTER TABLE CAVSAT_CONS_NATION ADD PRIMARY KEY (N_NATIONKEY);
ALTER TABLE CAVSAT_CONS_REGION ADD PRIMARY KEY (R_REGIONKEY);
ALTER TABLE CAVSAT_CONS_SUPPLIER ADD PRIMARY KEY (S_SUPPKEY);
ALTER TABLE CAVSAT_CONS_PART ADD PRIMARY KEY (P_PARTKEY);
ALTER TABLE CAVSAT_CONS_CUSTOMER ADD PRIMARY KEY (C_CUSTKEY);
ALTER TABLE CAVSAT_CONS_PARTSUPP ADD PRIMARY KEY (PS_PARTKEY, PS_SUPPKEY);
ALTER TABLE CAVSAT_CONS_ORDERS ADD PRIMARY KEY (O_ORDERKEY);
ALTER TABLE CAVSAT_CONS_LINEITEM ADD PRIMARY KEY (L_ORDERKEY, L_LINENUMBER);
PRINT 'ADDED PRIMARY KEYS TO CONS-TABLES'
--GO

-- Drop existing indexes on the incons-tables
DROP INDEX IF EXISTS CAVSAT_INCONS_NATION.INCONS_NATION_INDEX;
DROP INDEX IF EXISTS CAVSAT_INCONS_REGION.INCONS_REGION_INDEX;
DROP INDEX IF EXISTS CAVSAT_INCONS_CUSTOMER.INCONS_CUSTOMER_INDEX;
DROP INDEX IF EXISTS CAVSAT_INCONS_ORDERS.INCONS_ORDERS_INDEX;
DROP INDEX IF EXISTS CAVSAT_INCONS_PART.INCONS_PART_INDEX;
DROP INDEX IF EXISTS CAVSAT_INCONS_PARTSUPP.INCONS_PARTSUPP_INDEX;
DROP INDEX IF EXISTS CAVSAT_INCONS_SUPPLIER.INCONS_SUPPLIER_INDEX;
DROP INDEX IF EXISTS CAVSAT_INCONS_LINEITEM.INCONS_LINEITEM_INDEX;
--GO

-- Create indexes on the INCONS-tables
CREATE CLUSTERED INDEX INCONS_NATION_INDEX ON CAVSAT_INCONS_NATION (N_NATIONKEY);
CREATE CLUSTERED INDEX INCONS_REGION_INDEX ON CAVSAT_INCONS_REGION (R_REGIONKEY);
CREATE CLUSTERED INDEX INCONS_CUSTOMER_INDEX ON CAVSAT_INCONS_CUSTOMER (C_CUSTKEY);
CREATE CLUSTERED INDEX INCONS_ORDERS_INDEX ON CAVSAT_INCONS_ORDERS (O_ORDERKEY);
CREATE CLUSTERED INDEX INCONS_PART_INDEX ON CAVSAT_INCONS_PART (P_PARTKEY);
CREATE CLUSTERED INDEX INCONS_PARTSUPP_INDEX ON CAVSAT_INCONS_PARTSUPP (PS_PARTKEY, PS_SUPPKEY);
CREATE CLUSTERED INDEX INCONS_SUPPLIER_INDEX ON CAVSAT_INCONS_SUPPLIER (S_SUPPKEY);
CREATE CLUSTERED INDEX INCONS_LINEITEM_INDEX ON CAVSAT_INCONS_LINEITEM (L_ORDERKEY, L_LINENUMBER);
PRINT 'CREATED INDEXES ON INCONS-TABLES'
--GO

--Drop existing table CAvSAT_SYS_CONSTRAINTS
DROP TABLE IF EXISTS CAvSAT_SYS_CONSTRAINTS;
--GO

-- Create table CAvSAT_SYS_CONSTRAINTS
CREATE TABLE [dbo].[CAvSAT_SYS_CONSTRAINTS](
	[Constraint_ID] [int] IDENTITY(1,1) NOT NULL,
	[Constraint_Type] [varchar](255) NOT NULL,
	[Constraint_Definition] [varchar](255) NOT NULL,
PRIMARY KEY CLUSTERED 
([Constraint_ID] ASC)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
([Constraint_Definition] ASC)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
--GO

-- Populate CAvSAT_SYS_CONSTRAINTS table
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'SUPPLIER(S_SUPPKEY)');
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'PART(P_PARTKEY)');
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'PARTSUPP(PS_PARTKEY,PS_SUPPKEY)');
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'CUSTOMER(C_CUSTKEY)');
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'ORDERS(O_ORDERKEY)');
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'LINEITEM(L_ORDERKEY,L_LINENUMBER)');
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'NATION(N_NATIONKEY)');
INSERT INTO CAvSAT_SYS_CONSTRAINTS (Constraint_Type,Constraint_Definition) VALUES ('Primary Key' ,'REGION(R_REGIONKEY)');
PRINT 'CAvSAT_SYS_CONSTRAINTS DONE'
--GO

-- Drop existing indexes on the main TPC-H tables
DROP INDEX IF EXISTS NATION.NATION_INDEX;
DROP INDEX IF EXISTS REGION.REGION_INDEX;
DROP INDEX IF EXISTS CUSTOMER.CUSTOMER_INDEX;
DROP INDEX IF EXISTS ORDERS.ORDERS_INDEX;
DROP INDEX IF EXISTS PART.PART_INDEX;
DROP INDEX IF EXISTS PARTSUPP.PARTSUPP_INDEX;
DROP INDEX IF EXISTS SUPPLIER.SUPPLIER_INDEX;
DROP INDEX IF EXISTS LINEITEM.LINEITEM_INDEX;
--GO

-- Create indexes on the main TPC-H tables
CREATE CLUSTERED INDEX NATION_INDEX ON NATION (N_NATIONKEY);
CREATE CLUSTERED INDEX REGION_INDEX ON REGION (R_REGIONKEY);
CREATE CLUSTERED INDEX CUSTOMER_INDEX ON CUSTOMER (C_CUSTKEY);
CREATE CLUSTERED INDEX ORDERS_INDEX ON ORDERS (O_ORDERKEY);
CREATE CLUSTERED INDEX PART_INDEX ON PART (P_PARTKEY);
CREATE CLUSTERED INDEX PARTSUPP_INDEX ON PARTSUPP (PS_PARTKEY, PS_SUPPKEY);
CREATE CLUSTERED INDEX SUPPLIER_INDEX ON SUPPLIER (S_SUPPKEY);
CREATE CLUSTERED INDEX LINEITEM_INDEX ON LINEITEM (L_ORDERKEY, L_LINENUMBER);
PRINT 'CREATED INDEXES ON MAIN TABLES'
--GO
